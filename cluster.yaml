---
# Namespace for our demo apps
apiVersion: v1
kind: Namespace
metadata:
  name: demo-apps
  labels:
    purpose: kuberag-demo
---
# ConfigMap with app configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: demo-apps
data:
  database_url: "postgres://user:pass@db:5432/myapp"
  redis_url: "redis://redis:6379"
  log_level: "INFO"
  max_connections: "100"
---
# Secret for database credentials
apiVersion: v1
kind: Secret
metadata:
  name: db-credentials
  namespace: demo-apps
type: Opaque
data:
  username: dXNlcg==  # base64 encoded "user"
  password: cGFzcw==  # base64 encoded "pass"
---
# Healthy web application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-app
  namespace: demo-apps
  labels:
    app: web-app
    tier: frontend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: web-app
  template:
    metadata:
      labels:
        app: web-app
        tier: frontend
    spec:
      containers:
      - name: web
        image: nginx:1.20
        ports:
        - containerPort: 80
        env:
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: log_level
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
---
# Service for web app
apiVersion: v1
kind: Service
metadata:
  name: web-app-service
  namespace: demo-apps
spec:
  selector:
    app: web-app
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
  type: ClusterIP
---
# Database deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-db
  namespace: demo-apps
  labels:
    app: postgres
    tier: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        tier: database
    spec:
      containers:
      - name: postgres
        image: postgres:13
        env:
        - name: POSTGRES_DB
          value: "myapp"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: password
        ports:
        - containerPort: 5432
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-storage
        emptyDir: {}
---
# Redis cache
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-cache
  namespace: demo-apps
  labels:
    app: redis
    tier: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        tier: cache
    spec:
      containers:
      - name: redis
        image: redis:6.2
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
---
# Problematic deployment (will fail to pull image)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: failing-app
  namespace: demo-apps
  labels:
    app: failing-app
    tier: broken
spec:
  replicas: 2
  selector:
    matchLabels:
      app: failing-app
  template:
    metadata:
      labels:
        app: failing-app
        tier: broken
    spec:
      containers:
      - name: app
        image: nginx:nonexistent-tag  # This will fail with ImagePullBackOff!
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
---
# Worker deployment that crashes and restarts frequently
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flaky-worker
  namespace: demo-apps
  labels:
    app: flaky-worker
    tier: worker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flaky-worker
  template:
    metadata:
      labels:
        app: flaky-worker
        tier: worker
    spec:
      containers:
      - name: worker
        image: busybox:1.35
        command: ["/bin/sh"]
        args: ["-c", "echo 'Worker starting...'; sleep 30; echo 'Worker crashing!'; exit 1"]
        resources:
          requests:
            memory: "32Mi"
            cpu: "10m"
          limits:
            memory: "64Mi"
            cpu: "50m"
      # Note: restartPolicy is only at pod level, containers restart automatically
---
# App with resource constraints (might get OOMKilled)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: memory-hog
  namespace: demo-apps
  labels:
    app: memory-hog
    tier: problematic
spec:
  replicas: 1
  selector:
    matchLabels:
      app: memory-hog
  template:
    metadata:
      labels:
        app: memory-hog
        tier: problematic
    spec:
      containers:
      - name: hog
        image: busybox:1.35
        command: ["/bin/sh"]
        args: ["-c", "echo 'Allocating memory...'; dd if=/dev/zero of=/tmp/bigfile bs=1M count=100; sleep 300"]
        resources:
          requests:
            memory: "32Mi"
            cpu: "10m"
          limits:
            memory: "64Mi"  # Will likely get OOMKilled
            cpu: "50m"
---
# HorizontalPodAutoscaler for web app
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: web-app-hpa
  namespace: demo-apps
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: web-app
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
---
# Job that runs and completes
apiVersion: batch/v1
kind: Job
metadata:
  name: data-migration
  namespace: demo-apps
spec:
  template:
    spec:
      containers:
      - name: migration
        image: busybox:1.35
        command: ["/bin/sh"]
        args: ["-c", "echo 'Running data migration...'; sleep 60; echo 'Migration completed successfully'"]
      restartPolicy: Never
  backoffLimit: 3
---
# CronJob for regular tasks
apiVersion: batch/v1
kind: CronJob
metadata:
  name: cleanup-job
  namespace: demo-apps
spec:
  schedule: "*/5 * * * *"  # Every 5 minutes
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: cleanup
            image: busybox:1.35
            command: ["/bin/sh"]
            args: ["-c", "echo 'Running cleanup at $(date)'; sleep 10; echo 'Cleanup finished'"]
          restartPolicy: OnFailure
---
# PersistentVolumeClaim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: app-data
  namespace: demo-apps
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi